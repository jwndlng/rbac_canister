type Role = variant {
    Admin;
    Manager;
    Viewer;
    Anonymous;
};

type Access = record {
    id: principal;
    role: Role;
 };

type CanisterStatusResponse = record {
    status: CanisterStatusType; // Table 2
    memory_size: nat;
    cycles: nat;
    settings: DefiniteCanisterSettings; // Table 3
    idle_cycles_burned_per_day: nat;
    module_hash: opt vec nat8; // Table Table 5
};

type DefiniteCanisterSettings = record { // Table 3
    compute_allocation: nat;
    controllers: vec principal;
    memory_allocation: nat;
    freezing_threshold: nat;
};

type CanisterStatusType = variant { stopped; stopping; running };

type Result = variant {
    Ok: CanisterStatusResponse;
    Err: text;
}

service : {
    canister_status : (canister_id: principal) -> (Result);
    delegate_call: (canister_id: principal, method: text, arg: blob) -> (blob);
    get_access_list: () -> (vec Access) query;
    grant_access: (user: principal, role: Role) -> ();
    revoke_access: (user: principal) -> ();
};
